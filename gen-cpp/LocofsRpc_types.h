/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LocofsRpc_TYPES_H
#define LocofsRpc_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace LocofsRpc {

typedef struct _ReadData__isset {
  _ReadData__isset() : buf(false), size(false), error(false) {}
  bool buf;
  bool size;
  bool error;
} _ReadData__isset;

class ReadData {
 public:

  static const char* ascii_fingerprint; // = "7B98BF2BBD0ED49EF2DC00B6BA89EC08";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0x98,0xBF,0x2B,0xBD,0x0E,0xD4,0x9E,0xF2,0xDC,0x00,0xB6,0xBA,0x89,0xEC,0x08};

  ReadData() : buf(), size(0), error(0) {
  }

  virtual ~ReadData() throw() {}

  std::string buf;
  int64_t size;
  int32_t error;

  _ReadData__isset __isset;

  void __set_buf(const std::string& val) {
    buf = val;
  }

  void __set_size(const int64_t val) {
    size = val;
  }

  void __set_error(const int32_t val) {
    error = val;
  }

  bool operator == (const ReadData & rhs) const
  {
    if (!(buf == rhs.buf))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const ReadData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReadData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReadData &a, ReadData &b);

typedef struct _FileAccessInode__isset {
  _FileAccessInode__isset() : mode(false), ctime(false), uid(false), gid(false), error(false) {}
  bool mode;
  bool ctime;
  bool uid;
  bool gid;
  bool error;
} _FileAccessInode__isset;

class FileAccessInode {
 public:

  static const char* ascii_fingerprint; // = "6B77A2CDA662FC0245A08BD8FE4806B4";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0x77,0xA2,0xCD,0xA6,0x62,0xFC,0x02,0x45,0xA0,0x8B,0xD8,0xFE,0x48,0x06,0xB4};

  FileAccessInode() : mode(0), ctime(0), uid(0), gid(0), error(0) {
  }

  virtual ~FileAccessInode() throw() {}

  int32_t mode;
  int64_t ctime;
  int64_t uid;
  int64_t gid;
  int32_t error;

  _FileAccessInode__isset __isset;

  void __set_mode(const int32_t val) {
    mode = val;
  }

  void __set_ctime(const int64_t val) {
    ctime = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_gid(const int64_t val) {
    gid = val;
  }

  void __set_error(const int32_t val) {
    error = val;
  }

  bool operator == (const FileAccessInode & rhs) const
  {
    if (!(mode == rhs.mode))
      return false;
    if (!(ctime == rhs.ctime))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(gid == rhs.gid))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const FileAccessInode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileAccessInode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FileAccessInode &a, FileAccessInode &b);

typedef struct _FileContentInode__isset {
  _FileContentInode__isset() : mtime(false), atime(false), size(false), block_size(false), origin_name(false), error(false), suuid(false), sid(false) {}
  bool mtime;
  bool atime;
  bool size;
  bool block_size;
  bool origin_name;
  bool error;
  bool suuid;
  bool sid;
} _FileContentInode__isset;

class FileContentInode {
 public:

  static const char* ascii_fingerprint; // = "8CF4A9DB5FAB1B79CC0FA504543DF428";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0xF4,0xA9,0xDB,0x5F,0xAB,0x1B,0x79,0xCC,0x0F,0xA5,0x04,0x54,0x3D,0xF4,0x28};

  FileContentInode() : mtime(0), atime(0), size(0), block_size(0), origin_name(), error(0), suuid(0), sid(0) {
  }

  virtual ~FileContentInode() throw() {}

  int64_t mtime;
  int64_t atime;
  int64_t size;
  int64_t block_size;
  std::string origin_name;
  int32_t error;
  int64_t suuid;
  int64_t sid;

  _FileContentInode__isset __isset;

  void __set_mtime(const int64_t val) {
    mtime = val;
  }

  void __set_atime(const int64_t val) {
    atime = val;
  }

  void __set_size(const int64_t val) {
    size = val;
  }

  void __set_block_size(const int64_t val) {
    block_size = val;
  }

  void __set_origin_name(const std::string& val) {
    origin_name = val;
  }

  void __set_error(const int32_t val) {
    error = val;
  }

  void __set_suuid(const int64_t val) {
    suuid = val;
  }

  void __set_sid(const int64_t val) {
    sid = val;
  }

  bool operator == (const FileContentInode & rhs) const
  {
    if (!(mtime == rhs.mtime))
      return false;
    if (!(atime == rhs.atime))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(block_size == rhs.block_size))
      return false;
    if (!(origin_name == rhs.origin_name))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(suuid == rhs.suuid))
      return false;
    if (!(sid == rhs.sid))
      return false;
    return true;
  }
  bool operator != (const FileContentInode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileContentInode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FileContentInode &a, FileContentInode &b);

typedef struct _DirectoryInode__isset {
  _DirectoryInode__isset() : ctime(false), mode(false), uid(false), gid(false), status(false), old_name(false), error(false), uuid(false) {}
  bool ctime;
  bool mode;
  bool uid;
  bool gid;
  bool status;
  bool old_name;
  bool error;
  bool uuid;
} _DirectoryInode__isset;

class DirectoryInode {
 public:

  static const char* ascii_fingerprint; // = "FD5D575B67FBD7884CE407CE8F660C30";
  static const uint8_t binary_fingerprint[16]; // = {0xFD,0x5D,0x57,0x5B,0x67,0xFB,0xD7,0x88,0x4C,0xE4,0x07,0xCE,0x8F,0x66,0x0C,0x30};

  DirectoryInode() : ctime(0), mode(0), uid(0), gid(0), status(0), old_name(), error(0), uuid(0) {
  }

  virtual ~DirectoryInode() throw() {}

  int64_t ctime;
  int64_t mode;
  int64_t uid;
  int64_t gid;
  int64_t status;
  std::string old_name;
  int32_t error;
  int64_t uuid;

  _DirectoryInode__isset __isset;

  void __set_ctime(const int64_t val) {
    ctime = val;
  }

  void __set_mode(const int64_t val) {
    mode = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_gid(const int64_t val) {
    gid = val;
  }

  void __set_status(const int64_t val) {
    status = val;
  }

  void __set_old_name(const std::string& val) {
    old_name = val;
  }

  void __set_error(const int32_t val) {
    error = val;
  }

  void __set_uuid(const int64_t val) {
    uuid = val;
  }

  bool operator == (const DirectoryInode & rhs) const
  {
    if (!(ctime == rhs.ctime))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(gid == rhs.gid))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(old_name == rhs.old_name))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(uuid == rhs.uuid))
      return false;
    return true;
  }
  bool operator != (const DirectoryInode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DirectoryInode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DirectoryInode &a, DirectoryInode &b);

typedef struct _FileInode__isset {
  _FileInode__isset() : fc(false), fa(false), error(false) {}
  bool fc;
  bool fa;
  bool error;
} _FileInode__isset;

class FileInode {
 public:

  static const char* ascii_fingerprint; // = "2A4AB7712ECEB5CA90A74DE41B37CE98";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0x4A,0xB7,0x71,0x2E,0xCE,0xB5,0xCA,0x90,0xA7,0x4D,0xE4,0x1B,0x37,0xCE,0x98};

  FileInode() : error(0) {
  }

  virtual ~FileInode() throw() {}

  FileContentInode fc;
  FileAccessInode fa;
  int32_t error;

  _FileInode__isset __isset;

  void __set_fc(const FileContentInode& val) {
    fc = val;
  }

  void __set_fa(const FileAccessInode& val) {
    fa = val;
  }

  void __set_error(const int32_t val) {
    error = val;
  }

  bool operator == (const FileInode & rhs) const
  {
    if (!(fc == rhs.fc))
      return false;
    if (!(fa == rhs.fa))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const FileInode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileInode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FileInode &a, FileInode &b);


class NotFoundFileException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  NotFoundFileException() : message() {
  }

  virtual ~NotFoundFileException() throw() {}

  std::string message;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const NotFoundFileException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const NotFoundFileException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotFoundFileException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotFoundFileException &a, NotFoundFileException &b);


class AlreadyExistFileException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  AlreadyExistFileException() : message() {
  }

  virtual ~AlreadyExistFileException() throw() {}

  std::string message;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const AlreadyExistFileException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const AlreadyExistFileException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlreadyExistFileException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AlreadyExistFileException &a, AlreadyExistFileException &b);


class NotAFileException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  NotAFileException() : message() {
  }

  virtual ~NotAFileException() throw() {}

  std::string message;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const NotAFileException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const NotAFileException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotAFileException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotAFileException &a, NotAFileException &b);


class NotFoundDirectoryException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  NotFoundDirectoryException() : message() {
  }

  virtual ~NotFoundDirectoryException() throw() {}

  std::string message;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const NotFoundDirectoryException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const NotFoundDirectoryException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotFoundDirectoryException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotFoundDirectoryException &a, NotFoundDirectoryException &b);


class AlreayExistDirectoryException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  AlreayExistDirectoryException() : message() {
  }

  virtual ~AlreayExistDirectoryException() throw() {}

  std::string message;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const AlreayExistDirectoryException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const AlreayExistDirectoryException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlreayExistDirectoryException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AlreayExistDirectoryException &a, AlreayExistDirectoryException &b);


class NotADirectoryException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  NotADirectoryException() : message() {
  }

  virtual ~NotADirectoryException() throw() {}

  std::string message;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const NotADirectoryException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const NotADirectoryException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotADirectoryException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotADirectoryException &a, NotADirectoryException &b);


class IllegalPathException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  IllegalPathException() : message() {
  }

  virtual ~IllegalPathException() throw() {}

  std::string message;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const IllegalPathException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const IllegalPathException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IllegalPathException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(IllegalPathException &a, IllegalPathException &b);


class ParentPathNotFoundException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ParentPathNotFoundException() : message() {
  }

  virtual ~ParentPathNotFoundException() throw() {}

  std::string message;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ParentPathNotFoundException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ParentPathNotFoundException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParentPathNotFoundException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ParentPathNotFoundException &a, ParentPathNotFoundException &b);


class ObjectCreateException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ObjectCreateException() : message() {
  }

  virtual ~ObjectCreateException() throw() {}

  std::string message;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ObjectCreateException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ObjectCreateException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ObjectCreateException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ObjectCreateException &a, ObjectCreateException &b);


class ObjectRemoveException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ObjectRemoveException() : message() {
  }

  virtual ~ObjectRemoveException() throw() {}

  std::string message;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ObjectRemoveException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ObjectRemoveException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ObjectRemoveException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ObjectRemoveException &a, ObjectRemoveException &b);


class ObjectNotExist : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ObjectNotExist() : message() {
  }

  virtual ~ObjectNotExist() throw() {}

  std::string message;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ObjectNotExist & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ObjectNotExist &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ObjectNotExist & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ObjectNotExist &a, ObjectNotExist &b);


class IOFailedException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  IOFailedException() : message() {
  }

  virtual ~IOFailedException() throw() {}

  std::string message;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const IOFailedException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const IOFailedException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IOFailedException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(IOFailedException &a, IOFailedException &b);

} // namespace

#endif
