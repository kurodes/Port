// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DataService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::LocofsRpc;

class DataServiceHandler : virtual public DataServiceIf {
 public:
  DataServiceHandler() {
    // Your initialization goes here
  }

  int32_t write(const std::string& oid, const int64_t offset, const int64_t size, const std::string& buf) {
    // Your implementation goes here
    printf("write\n");
  }

  void read(ReadData& _return, const std::string& oid, const int64_t offset, const int64_t size) {
    // Your implementation goes here
    printf("read\n");
  }

  int32_t remove(const std::string& oid) {
    // Your implementation goes here
    printf("remove\n");
  }

  void read_meta(std::string& _return, const std::string& st, const int64_t offset, const int64_t size) {
    // Your implementation goes here
    printf("read_meta\n");
  }

  void rdma_data_read(ReadData& _return, const int64_t global_address, const int64_t size) {
    // Your implementation goes here
    printf("rdma_data_read\n");
  }

  int64_t prealloc_space(const std::string& id, const int64_t size, const int64_t offset) {
    // Your implementation goes here
    printf("prealloc_space\n");
  }

  int64_t rdma_data_write(const int64_t remote_address, const int64_t size, const std::string& local_buffer) {
    // Your implementation goes here
    printf("rdma_data_write\n");
  }

  int64_t object_write(const std::string& id, const int64_t object_write_size, const int64_t object_offset, const int64_t remote_address) {
    // Your implementation goes here
    printf("object_write\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<DataServiceHandler> handler(new DataServiceHandler());
  shared_ptr<TProcessor> processor(new DataServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

