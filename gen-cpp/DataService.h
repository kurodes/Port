/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DataService_H
#define DataService_H

#include <thrift/TDispatchProcessor.h>
#include "LocofsRpc_types.h"

namespace LocofsRpc {

class DataServiceIf {
 public:
  virtual ~DataServiceIf() {}
  virtual int32_t write(const std::string& oid, const int64_t offset, const int64_t size, const std::string& buf) = 0;
  virtual void read(ReadData& _return, const std::string& oid, const int64_t offset, const int64_t size) = 0;
  virtual int32_t remove(const std::string& oid) = 0;
  virtual void read_meta(std::string& _return, const std::string& st, const int64_t offset, const int64_t size) = 0;
  virtual void rdma_data_read(ReadData& _return, const int64_t global_address, const int64_t size) = 0;
  virtual int64_t prealloc_space(const std::string& id, const int64_t size, const int64_t offset) = 0;
  virtual int64_t rdma_data_write(const int64_t remote_address, const int64_t size, const std::string& local_buffer) = 0;
  virtual int64_t object_write(const std::string& id, const int64_t object_write_size, const int64_t object_offset, const int64_t remote_address) = 0;
};

class DataServiceIfFactory {
 public:
  typedef DataServiceIf Handler;

  virtual ~DataServiceIfFactory() {}

  virtual DataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DataServiceIf* /* handler */) = 0;
};

class DataServiceIfSingletonFactory : virtual public DataServiceIfFactory {
 public:
  DataServiceIfSingletonFactory(const boost::shared_ptr<DataServiceIf>& iface) : iface_(iface) {}
  virtual ~DataServiceIfSingletonFactory() {}

  virtual DataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DataServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DataServiceIf> iface_;
};

class DataServiceNull : virtual public DataServiceIf {
 public:
  virtual ~DataServiceNull() {}
  int32_t write(const std::string& /* oid */, const int64_t /* offset */, const int64_t /* size */, const std::string& /* buf */) {
    int32_t _return = 0;
    return _return;
  }
  void read(ReadData& /* _return */, const std::string& /* oid */, const int64_t /* offset */, const int64_t /* size */) {
    return;
  }
  int32_t remove(const std::string& /* oid */) {
    int32_t _return = 0;
    return _return;
  }
  void read_meta(std::string& /* _return */, const std::string& /* st */, const int64_t /* offset */, const int64_t /* size */) {
    return;
  }
  void rdma_data_read(ReadData& /* _return */, const int64_t /* global_address */, const int64_t /* size */) {
    return;
  }
  int64_t prealloc_space(const std::string& /* id */, const int64_t /* size */, const int64_t /* offset */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t rdma_data_write(const int64_t /* remote_address */, const int64_t /* size */, const std::string& /* local_buffer */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t object_write(const std::string& /* id */, const int64_t /* object_write_size */, const int64_t /* object_offset */, const int64_t /* remote_address */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _DataService_write_args__isset {
  _DataService_write_args__isset() : oid(false), offset(false), size(false), buf(false) {}
  bool oid;
  bool offset;
  bool size;
  bool buf;
} _DataService_write_args__isset;

class DataService_write_args {
 public:

  DataService_write_args() : oid(), offset(0), size(0), buf() {
  }

  virtual ~DataService_write_args() throw() {}

  std::string oid;
  int64_t offset;
  int64_t size;
  std::string buf;

  _DataService_write_args__isset __isset;

  void __set_oid(const std::string& val) {
    oid = val;
  }

  void __set_offset(const int64_t val) {
    offset = val;
  }

  void __set_size(const int64_t val) {
    size = val;
  }

  void __set_buf(const std::string& val) {
    buf = val;
  }

  bool operator == (const DataService_write_args & rhs) const
  {
    if (!(oid == rhs.oid))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(buf == rhs.buf))
      return false;
    return true;
  }
  bool operator != (const DataService_write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_write_pargs {
 public:


  virtual ~DataService_write_pargs() throw() {}

  const std::string* oid;
  const int64_t* offset;
  const int64_t* size;
  const std::string* buf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_write_result__isset {
  _DataService_write_result__isset() : success(false), ioe(false), oce(false) {}
  bool success;
  bool ioe;
  bool oce;
} _DataService_write_result__isset;

class DataService_write_result {
 public:

  DataService_write_result() : success(0) {
  }

  virtual ~DataService_write_result() throw() {}

  int32_t success;
  IOFailedException ioe;
  ObjectCreateException oce;

  _DataService_write_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_ioe(const IOFailedException& val) {
    ioe = val;
  }

  void __set_oce(const ObjectCreateException& val) {
    oce = val;
  }

  bool operator == (const DataService_write_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ioe == rhs.ioe))
      return false;
    if (!(oce == rhs.oce))
      return false;
    return true;
  }
  bool operator != (const DataService_write_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_write_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_write_presult__isset {
  _DataService_write_presult__isset() : success(false), ioe(false), oce(false) {}
  bool success;
  bool ioe;
  bool oce;
} _DataService_write_presult__isset;

class DataService_write_presult {
 public:


  virtual ~DataService_write_presult() throw() {}

  int32_t* success;
  IOFailedException ioe;
  ObjectCreateException oce;

  _DataService_write_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataService_read_args__isset {
  _DataService_read_args__isset() : oid(false), offset(false), size(false) {}
  bool oid;
  bool offset;
  bool size;
} _DataService_read_args__isset;

class DataService_read_args {
 public:

  DataService_read_args() : oid(), offset(0), size(0) {
  }

  virtual ~DataService_read_args() throw() {}

  std::string oid;
  int64_t offset;
  int64_t size;

  _DataService_read_args__isset __isset;

  void __set_oid(const std::string& val) {
    oid = val;
  }

  void __set_offset(const int64_t val) {
    offset = val;
  }

  void __set_size(const int64_t val) {
    size = val;
  }

  bool operator == (const DataService_read_args & rhs) const
  {
    if (!(oid == rhs.oid))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const DataService_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_read_pargs {
 public:


  virtual ~DataService_read_pargs() throw() {}

  const std::string* oid;
  const int64_t* offset;
  const int64_t* size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_read_result__isset {
  _DataService_read_result__isset() : success(false), ioe(false), one(false) {}
  bool success;
  bool ioe;
  bool one;
} _DataService_read_result__isset;

class DataService_read_result {
 public:

  DataService_read_result() {
  }

  virtual ~DataService_read_result() throw() {}

  ReadData success;
  IOFailedException ioe;
  ObjectNotExist one;

  _DataService_read_result__isset __isset;

  void __set_success(const ReadData& val) {
    success = val;
  }

  void __set_ioe(const IOFailedException& val) {
    ioe = val;
  }

  void __set_one(const ObjectNotExist& val) {
    one = val;
  }

  bool operator == (const DataService_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ioe == rhs.ioe))
      return false;
    if (!(one == rhs.one))
      return false;
    return true;
  }
  bool operator != (const DataService_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_read_presult__isset {
  _DataService_read_presult__isset() : success(false), ioe(false), one(false) {}
  bool success;
  bool ioe;
  bool one;
} _DataService_read_presult__isset;

class DataService_read_presult {
 public:


  virtual ~DataService_read_presult() throw() {}

  ReadData* success;
  IOFailedException ioe;
  ObjectNotExist one;

  _DataService_read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataService_remove_args__isset {
  _DataService_remove_args__isset() : oid(false) {}
  bool oid;
} _DataService_remove_args__isset;

class DataService_remove_args {
 public:

  DataService_remove_args() : oid() {
  }

  virtual ~DataService_remove_args() throw() {}

  std::string oid;

  _DataService_remove_args__isset __isset;

  void __set_oid(const std::string& val) {
    oid = val;
  }

  bool operator == (const DataService_remove_args & rhs) const
  {
    if (!(oid == rhs.oid))
      return false;
    return true;
  }
  bool operator != (const DataService_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_remove_pargs {
 public:


  virtual ~DataService_remove_pargs() throw() {}

  const std::string* oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_remove_result__isset {
  _DataService_remove_result__isset() : success(false), ore(false) {}
  bool success;
  bool ore;
} _DataService_remove_result__isset;

class DataService_remove_result {
 public:

  DataService_remove_result() : success(0) {
  }

  virtual ~DataService_remove_result() throw() {}

  int32_t success;
  ObjectRemoveException ore;

  _DataService_remove_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_ore(const ObjectRemoveException& val) {
    ore = val;
  }

  bool operator == (const DataService_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ore == rhs.ore))
      return false;
    return true;
  }
  bool operator != (const DataService_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_remove_presult__isset {
  _DataService_remove_presult__isset() : success(false), ore(false) {}
  bool success;
  bool ore;
} _DataService_remove_presult__isset;

class DataService_remove_presult {
 public:


  virtual ~DataService_remove_presult() throw() {}

  int32_t* success;
  ObjectRemoveException ore;

  _DataService_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataService_read_meta_args__isset {
  _DataService_read_meta_args__isset() : st(false), offset(false), size(false) {}
  bool st;
  bool offset;
  bool size;
} _DataService_read_meta_args__isset;

class DataService_read_meta_args {
 public:

  DataService_read_meta_args() : st(), offset(0), size(0) {
  }

  virtual ~DataService_read_meta_args() throw() {}

  std::string st;
  int64_t offset;
  int64_t size;

  _DataService_read_meta_args__isset __isset;

  void __set_st(const std::string& val) {
    st = val;
  }

  void __set_offset(const int64_t val) {
    offset = val;
  }

  void __set_size(const int64_t val) {
    size = val;
  }

  bool operator == (const DataService_read_meta_args & rhs) const
  {
    if (!(st == rhs.st))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const DataService_read_meta_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_read_meta_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_read_meta_pargs {
 public:


  virtual ~DataService_read_meta_pargs() throw() {}

  const std::string* st;
  const int64_t* offset;
  const int64_t* size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_read_meta_result__isset {
  _DataService_read_meta_result__isset() : success(false) {}
  bool success;
} _DataService_read_meta_result__isset;

class DataService_read_meta_result {
 public:

  DataService_read_meta_result() : success() {
  }

  virtual ~DataService_read_meta_result() throw() {}

  std::string success;

  _DataService_read_meta_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DataService_read_meta_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataService_read_meta_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_read_meta_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_read_meta_presult__isset {
  _DataService_read_meta_presult__isset() : success(false) {}
  bool success;
} _DataService_read_meta_presult__isset;

class DataService_read_meta_presult {
 public:


  virtual ~DataService_read_meta_presult() throw() {}

  std::string* success;

  _DataService_read_meta_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataService_rdma_data_read_args__isset {
  _DataService_rdma_data_read_args__isset() : global_address(false), size(false) {}
  bool global_address;
  bool size;
} _DataService_rdma_data_read_args__isset;

class DataService_rdma_data_read_args {
 public:

  DataService_rdma_data_read_args() : global_address(0), size(0) {
  }

  virtual ~DataService_rdma_data_read_args() throw() {}

  int64_t global_address;
  int64_t size;

  _DataService_rdma_data_read_args__isset __isset;

  void __set_global_address(const int64_t val) {
    global_address = val;
  }

  void __set_size(const int64_t val) {
    size = val;
  }

  bool operator == (const DataService_rdma_data_read_args & rhs) const
  {
    if (!(global_address == rhs.global_address))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const DataService_rdma_data_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_rdma_data_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_rdma_data_read_pargs {
 public:


  virtual ~DataService_rdma_data_read_pargs() throw() {}

  const int64_t* global_address;
  const int64_t* size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_rdma_data_read_result__isset {
  _DataService_rdma_data_read_result__isset() : success(false) {}
  bool success;
} _DataService_rdma_data_read_result__isset;

class DataService_rdma_data_read_result {
 public:

  DataService_rdma_data_read_result() {
  }

  virtual ~DataService_rdma_data_read_result() throw() {}

  ReadData success;

  _DataService_rdma_data_read_result__isset __isset;

  void __set_success(const ReadData& val) {
    success = val;
  }

  bool operator == (const DataService_rdma_data_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataService_rdma_data_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_rdma_data_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_rdma_data_read_presult__isset {
  _DataService_rdma_data_read_presult__isset() : success(false) {}
  bool success;
} _DataService_rdma_data_read_presult__isset;

class DataService_rdma_data_read_presult {
 public:


  virtual ~DataService_rdma_data_read_presult() throw() {}

  ReadData* success;

  _DataService_rdma_data_read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataService_prealloc_space_args__isset {
  _DataService_prealloc_space_args__isset() : id(false), size(false), offset(false) {}
  bool id;
  bool size;
  bool offset;
} _DataService_prealloc_space_args__isset;

class DataService_prealloc_space_args {
 public:

  DataService_prealloc_space_args() : id(), size(0), offset(0) {
  }

  virtual ~DataService_prealloc_space_args() throw() {}

  std::string id;
  int64_t size;
  int64_t offset;

  _DataService_prealloc_space_args__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_size(const int64_t val) {
    size = val;
  }

  void __set_offset(const int64_t val) {
    offset = val;
  }

  bool operator == (const DataService_prealloc_space_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const DataService_prealloc_space_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_prealloc_space_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_prealloc_space_pargs {
 public:


  virtual ~DataService_prealloc_space_pargs() throw() {}

  const std::string* id;
  const int64_t* size;
  const int64_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_prealloc_space_result__isset {
  _DataService_prealloc_space_result__isset() : success(false) {}
  bool success;
} _DataService_prealloc_space_result__isset;

class DataService_prealloc_space_result {
 public:

  DataService_prealloc_space_result() : success(0) {
  }

  virtual ~DataService_prealloc_space_result() throw() {}

  int64_t success;

  _DataService_prealloc_space_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const DataService_prealloc_space_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataService_prealloc_space_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_prealloc_space_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_prealloc_space_presult__isset {
  _DataService_prealloc_space_presult__isset() : success(false) {}
  bool success;
} _DataService_prealloc_space_presult__isset;

class DataService_prealloc_space_presult {
 public:


  virtual ~DataService_prealloc_space_presult() throw() {}

  int64_t* success;

  _DataService_prealloc_space_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataService_rdma_data_write_args__isset {
  _DataService_rdma_data_write_args__isset() : remote_address(false), size(false), local_buffer(false) {}
  bool remote_address;
  bool size;
  bool local_buffer;
} _DataService_rdma_data_write_args__isset;

class DataService_rdma_data_write_args {
 public:

  DataService_rdma_data_write_args() : remote_address(0), size(0), local_buffer() {
  }

  virtual ~DataService_rdma_data_write_args() throw() {}

  int64_t remote_address;
  int64_t size;
  std::string local_buffer;

  _DataService_rdma_data_write_args__isset __isset;

  void __set_remote_address(const int64_t val) {
    remote_address = val;
  }

  void __set_size(const int64_t val) {
    size = val;
  }

  void __set_local_buffer(const std::string& val) {
    local_buffer = val;
  }

  bool operator == (const DataService_rdma_data_write_args & rhs) const
  {
    if (!(remote_address == rhs.remote_address))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(local_buffer == rhs.local_buffer))
      return false;
    return true;
  }
  bool operator != (const DataService_rdma_data_write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_rdma_data_write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_rdma_data_write_pargs {
 public:


  virtual ~DataService_rdma_data_write_pargs() throw() {}

  const int64_t* remote_address;
  const int64_t* size;
  const std::string* local_buffer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_rdma_data_write_result__isset {
  _DataService_rdma_data_write_result__isset() : success(false) {}
  bool success;
} _DataService_rdma_data_write_result__isset;

class DataService_rdma_data_write_result {
 public:

  DataService_rdma_data_write_result() : success(0) {
  }

  virtual ~DataService_rdma_data_write_result() throw() {}

  int64_t success;

  _DataService_rdma_data_write_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const DataService_rdma_data_write_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataService_rdma_data_write_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_rdma_data_write_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_rdma_data_write_presult__isset {
  _DataService_rdma_data_write_presult__isset() : success(false) {}
  bool success;
} _DataService_rdma_data_write_presult__isset;

class DataService_rdma_data_write_presult {
 public:


  virtual ~DataService_rdma_data_write_presult() throw() {}

  int64_t* success;

  _DataService_rdma_data_write_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataService_object_write_args__isset {
  _DataService_object_write_args__isset() : id(false), object_write_size(false), object_offset(false), remote_address(false) {}
  bool id;
  bool object_write_size;
  bool object_offset;
  bool remote_address;
} _DataService_object_write_args__isset;

class DataService_object_write_args {
 public:

  DataService_object_write_args() : id(), object_write_size(0), object_offset(0), remote_address(0) {
  }

  virtual ~DataService_object_write_args() throw() {}

  std::string id;
  int64_t object_write_size;
  int64_t object_offset;
  int64_t remote_address;

  _DataService_object_write_args__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_object_write_size(const int64_t val) {
    object_write_size = val;
  }

  void __set_object_offset(const int64_t val) {
    object_offset = val;
  }

  void __set_remote_address(const int64_t val) {
    remote_address = val;
  }

  bool operator == (const DataService_object_write_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(object_write_size == rhs.object_write_size))
      return false;
    if (!(object_offset == rhs.object_offset))
      return false;
    if (!(remote_address == rhs.remote_address))
      return false;
    return true;
  }
  bool operator != (const DataService_object_write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_object_write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_object_write_pargs {
 public:


  virtual ~DataService_object_write_pargs() throw() {}

  const std::string* id;
  const int64_t* object_write_size;
  const int64_t* object_offset;
  const int64_t* remote_address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_object_write_result__isset {
  _DataService_object_write_result__isset() : success(false) {}
  bool success;
} _DataService_object_write_result__isset;

class DataService_object_write_result {
 public:

  DataService_object_write_result() : success(0) {
  }

  virtual ~DataService_object_write_result() throw() {}

  int64_t success;

  _DataService_object_write_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const DataService_object_write_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataService_object_write_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_object_write_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_object_write_presult__isset {
  _DataService_object_write_presult__isset() : success(false) {}
  bool success;
} _DataService_object_write_presult__isset;

class DataService_object_write_presult {
 public:


  virtual ~DataService_object_write_presult() throw() {}

  int64_t* success;

  _DataService_object_write_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DataServiceClient : virtual public DataServiceIf {
 public:
  DataServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DataServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t write(const std::string& oid, const int64_t offset, const int64_t size, const std::string& buf);
  void send_write(const std::string& oid, const int64_t offset, const int64_t size, const std::string& buf);
  int32_t recv_write();
  void read(ReadData& _return, const std::string& oid, const int64_t offset, const int64_t size);
  void send_read(const std::string& oid, const int64_t offset, const int64_t size);
  void recv_read(ReadData& _return);
  int32_t remove(const std::string& oid);
  void send_remove(const std::string& oid);
  int32_t recv_remove();
  void read_meta(std::string& _return, const std::string& st, const int64_t offset, const int64_t size);
  void send_read_meta(const std::string& st, const int64_t offset, const int64_t size);
  void recv_read_meta(std::string& _return);
  void rdma_data_read(ReadData& _return, const int64_t global_address, const int64_t size);
  void send_rdma_data_read(const int64_t global_address, const int64_t size);
  void recv_rdma_data_read(ReadData& _return);
  int64_t prealloc_space(const std::string& id, const int64_t size, const int64_t offset);
  void send_prealloc_space(const std::string& id, const int64_t size, const int64_t offset);
  int64_t recv_prealloc_space();
  int64_t rdma_data_write(const int64_t remote_address, const int64_t size, const std::string& local_buffer);
  void send_rdma_data_write(const int64_t remote_address, const int64_t size, const std::string& local_buffer);
  int64_t recv_rdma_data_write();
  int64_t object_write(const std::string& id, const int64_t object_write_size, const int64_t object_offset, const int64_t remote_address);
  void send_object_write(const std::string& id, const int64_t object_write_size, const int64_t object_offset, const int64_t remote_address);
  int64_t recv_object_write();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DataServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DataServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DataServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_write(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read_meta(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rdma_data_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prealloc_space(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rdma_data_write(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_object_write(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DataServiceProcessor(boost::shared_ptr<DataServiceIf> iface) :
    iface_(iface) {
    processMap_["write"] = &DataServiceProcessor::process_write;
    processMap_["read"] = &DataServiceProcessor::process_read;
    processMap_["remove"] = &DataServiceProcessor::process_remove;
    processMap_["read_meta"] = &DataServiceProcessor::process_read_meta;
    processMap_["rdma_data_read"] = &DataServiceProcessor::process_rdma_data_read;
    processMap_["prealloc_space"] = &DataServiceProcessor::process_prealloc_space;
    processMap_["rdma_data_write"] = &DataServiceProcessor::process_rdma_data_write;
    processMap_["object_write"] = &DataServiceProcessor::process_object_write;
  }

  virtual ~DataServiceProcessor() {}
};

class DataServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DataServiceProcessorFactory(const ::boost::shared_ptr< DataServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DataServiceIfFactory > handlerFactory_;
};

class DataServiceMultiface : virtual public DataServiceIf {
 public:
  DataServiceMultiface(std::vector<boost::shared_ptr<DataServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DataServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DataServiceIf> > ifaces_;
  DataServiceMultiface() {}
  void add(boost::shared_ptr<DataServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t write(const std::string& oid, const int64_t offset, const int64_t size, const std::string& buf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->write(oid, offset, size, buf);
    }
    return ifaces_[i]->write(oid, offset, size, buf);
  }

  void read(ReadData& _return, const std::string& oid, const int64_t offset, const int64_t size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read(_return, oid, offset, size);
    }
    ifaces_[i]->read(_return, oid, offset, size);
    return;
  }

  int32_t remove(const std::string& oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(oid);
    }
    return ifaces_[i]->remove(oid);
  }

  void read_meta(std::string& _return, const std::string& st, const int64_t offset, const int64_t size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read_meta(_return, st, offset, size);
    }
    ifaces_[i]->read_meta(_return, st, offset, size);
    return;
  }

  void rdma_data_read(ReadData& _return, const int64_t global_address, const int64_t size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rdma_data_read(_return, global_address, size);
    }
    ifaces_[i]->rdma_data_read(_return, global_address, size);
    return;
  }

  int64_t prealloc_space(const std::string& id, const int64_t size, const int64_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prealloc_space(id, size, offset);
    }
    return ifaces_[i]->prealloc_space(id, size, offset);
  }

  int64_t rdma_data_write(const int64_t remote_address, const int64_t size, const std::string& local_buffer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rdma_data_write(remote_address, size, local_buffer);
    }
    return ifaces_[i]->rdma_data_write(remote_address, size, local_buffer);
  }

  int64_t object_write(const std::string& id, const int64_t object_write_size, const int64_t object_offset, const int64_t remote_address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->object_write(id, object_write_size, object_offset, remote_address);
    }
    return ifaces_[i]->object_write(id, object_write_size, object_offset, remote_address);
  }

};

} // namespace

#endif
