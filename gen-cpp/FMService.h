/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FMService_H
#define FMService_H

#include <thrift/TDispatchProcessor.h>
#include "LocofsRpc_types.h"

namespace LocofsRpc {

class FMServiceIf {
 public:
  virtual ~FMServiceIf() {}
  virtual int32_t create(const std::string& path, const FileAccessInode& fa) = 0;
  virtual void open(FileInode& _return, const std::string& path, const FileAccessInode& fa) = 0;
  virtual int32_t access(const std::string& path, const FileAccessInode& fa) = 0;
  virtual int32_t chown(const std::string& path, const FileAccessInode& fa) = 0;
  virtual int32_t chmod(const std::string& path, const FileAccessInode& fa) = 0;
  virtual int32_t remove(const std::string& path, const FileAccessInode& fa) = 0;
  virtual int32_t csize(const std::string& path, const FileContentInode& fc) = 0;
  virtual void getAttr(FileInode& _return, const std::string& path, const FileInode& fi) = 0;
  virtual void getContent(FileContentInode& _return, const std::string& path, const FileContentInode& fi) = 0;
  virtual void getAccess(FileAccessInode& _return, const std::string& path, const FileAccessInode& fa) = 0;
  virtual void readdir(std::string& _return, const int64_t uuid) = 0;
  virtual int32_t utimens(const std::string& path, const FileContentInode& fc) = 0;
  virtual int32_t rename(const std::string& old_path, const std::string& new_path) = 0;
};

class FMServiceIfFactory {
 public:
  typedef FMServiceIf Handler;

  virtual ~FMServiceIfFactory() {}

  virtual FMServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FMServiceIf* /* handler */) = 0;
};

class FMServiceIfSingletonFactory : virtual public FMServiceIfFactory {
 public:
  FMServiceIfSingletonFactory(const boost::shared_ptr<FMServiceIf>& iface) : iface_(iface) {}
  virtual ~FMServiceIfSingletonFactory() {}

  virtual FMServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FMServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<FMServiceIf> iface_;
};

class FMServiceNull : virtual public FMServiceIf {
 public:
  virtual ~FMServiceNull() {}
  int32_t create(const std::string& /* path */, const FileAccessInode& /* fa */) {
    int32_t _return = 0;
    return _return;
  }
  void open(FileInode& /* _return */, const std::string& /* path */, const FileAccessInode& /* fa */) {
    return;
  }
  int32_t access(const std::string& /* path */, const FileAccessInode& /* fa */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t chown(const std::string& /* path */, const FileAccessInode& /* fa */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t chmod(const std::string& /* path */, const FileAccessInode& /* fa */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t remove(const std::string& /* path */, const FileAccessInode& /* fa */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t csize(const std::string& /* path */, const FileContentInode& /* fc */) {
    int32_t _return = 0;
    return _return;
  }
  void getAttr(FileInode& /* _return */, const std::string& /* path */, const FileInode& /* fi */) {
    return;
  }
  void getContent(FileContentInode& /* _return */, const std::string& /* path */, const FileContentInode& /* fi */) {
    return;
  }
  void getAccess(FileAccessInode& /* _return */, const std::string& /* path */, const FileAccessInode& /* fa */) {
    return;
  }
  void readdir(std::string& /* _return */, const int64_t /* uuid */) {
    return;
  }
  int32_t utimens(const std::string& /* path */, const FileContentInode& /* fc */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t rename(const std::string& /* old_path */, const std::string& /* new_path */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _FMService_create_args__isset {
  _FMService_create_args__isset() : path(false), fa(false) {}
  bool path;
  bool fa;
} _FMService_create_args__isset;

class FMService_create_args {
 public:

  FMService_create_args() : path() {
  }

  virtual ~FMService_create_args() throw() {}

  std::string path;
  FileAccessInode fa;

  _FMService_create_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_fa(const FileAccessInode& val) {
    fa = val;
  }

  bool operator == (const FMService_create_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(fa == rhs.fa))
      return false;
    return true;
  }
  bool operator != (const FMService_create_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_create_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FMService_create_pargs {
 public:


  virtual ~FMService_create_pargs() throw() {}

  const std::string* path;
  const FileAccessInode* fa;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_create_result__isset {
  _FMService_create_result__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_create_result__isset;

class FMService_create_result {
 public:

  FMService_create_result() : success(0) {
  }

  virtual ~FMService_create_result() throw() {}

  int32_t success;
  AlreadyExistFileException aee;
  NotAFileException nfe;

  _FMService_create_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_aee(const AlreadyExistFileException& val) {
    aee = val;
  }

  void __set_nfe(const NotAFileException& val) {
    nfe = val;
  }

  bool operator == (const FMService_create_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(aee == rhs.aee))
      return false;
    if (!(nfe == rhs.nfe))
      return false;
    return true;
  }
  bool operator != (const FMService_create_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_create_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_create_presult__isset {
  _FMService_create_presult__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_create_presult__isset;

class FMService_create_presult {
 public:


  virtual ~FMService_create_presult() throw() {}

  int32_t* success;
  AlreadyExistFileException aee;
  NotAFileException nfe;

  _FMService_create_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FMService_open_args__isset {
  _FMService_open_args__isset() : path(false), fa(false) {}
  bool path;
  bool fa;
} _FMService_open_args__isset;

class FMService_open_args {
 public:

  FMService_open_args() : path() {
  }

  virtual ~FMService_open_args() throw() {}

  std::string path;
  FileAccessInode fa;

  _FMService_open_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_fa(const FileAccessInode& val) {
    fa = val;
  }

  bool operator == (const FMService_open_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(fa == rhs.fa))
      return false;
    return true;
  }
  bool operator != (const FMService_open_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_open_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FMService_open_pargs {
 public:


  virtual ~FMService_open_pargs() throw() {}

  const std::string* path;
  const FileAccessInode* fa;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_open_result__isset {
  _FMService_open_result__isset() : success(false) {}
  bool success;
} _FMService_open_result__isset;

class FMService_open_result {
 public:

  FMService_open_result() {
  }

  virtual ~FMService_open_result() throw() {}

  FileInode success;

  _FMService_open_result__isset __isset;

  void __set_success(const FileInode& val) {
    success = val;
  }

  bool operator == (const FMService_open_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FMService_open_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_open_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_open_presult__isset {
  _FMService_open_presult__isset() : success(false) {}
  bool success;
} _FMService_open_presult__isset;

class FMService_open_presult {
 public:


  virtual ~FMService_open_presult() throw() {}

  FileInode* success;

  _FMService_open_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FMService_access_args__isset {
  _FMService_access_args__isset() : path(false), fa(false) {}
  bool path;
  bool fa;
} _FMService_access_args__isset;

class FMService_access_args {
 public:

  FMService_access_args() : path() {
  }

  virtual ~FMService_access_args() throw() {}

  std::string path;
  FileAccessInode fa;

  _FMService_access_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_fa(const FileAccessInode& val) {
    fa = val;
  }

  bool operator == (const FMService_access_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(fa == rhs.fa))
      return false;
    return true;
  }
  bool operator != (const FMService_access_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_access_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FMService_access_pargs {
 public:


  virtual ~FMService_access_pargs() throw() {}

  const std::string* path;
  const FileAccessInode* fa;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_access_result__isset {
  _FMService_access_result__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_access_result__isset;

class FMService_access_result {
 public:

  FMService_access_result() : success(0) {
  }

  virtual ~FMService_access_result() throw() {}

  int32_t success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_access_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_aee(const NotFoundFileException& val) {
    aee = val;
  }

  void __set_nfe(const NotAFileException& val) {
    nfe = val;
  }

  bool operator == (const FMService_access_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(aee == rhs.aee))
      return false;
    if (!(nfe == rhs.nfe))
      return false;
    return true;
  }
  bool operator != (const FMService_access_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_access_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_access_presult__isset {
  _FMService_access_presult__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_access_presult__isset;

class FMService_access_presult {
 public:


  virtual ~FMService_access_presult() throw() {}

  int32_t* success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_access_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FMService_chown_args__isset {
  _FMService_chown_args__isset() : path(false), fa(false) {}
  bool path;
  bool fa;
} _FMService_chown_args__isset;

class FMService_chown_args {
 public:

  FMService_chown_args() : path() {
  }

  virtual ~FMService_chown_args() throw() {}

  std::string path;
  FileAccessInode fa;

  _FMService_chown_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_fa(const FileAccessInode& val) {
    fa = val;
  }

  bool operator == (const FMService_chown_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(fa == rhs.fa))
      return false;
    return true;
  }
  bool operator != (const FMService_chown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_chown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FMService_chown_pargs {
 public:


  virtual ~FMService_chown_pargs() throw() {}

  const std::string* path;
  const FileAccessInode* fa;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_chown_result__isset {
  _FMService_chown_result__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_chown_result__isset;

class FMService_chown_result {
 public:

  FMService_chown_result() : success(0) {
  }

  virtual ~FMService_chown_result() throw() {}

  int32_t success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_chown_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_aee(const NotFoundFileException& val) {
    aee = val;
  }

  void __set_nfe(const NotAFileException& val) {
    nfe = val;
  }

  bool operator == (const FMService_chown_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(aee == rhs.aee))
      return false;
    if (!(nfe == rhs.nfe))
      return false;
    return true;
  }
  bool operator != (const FMService_chown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_chown_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_chown_presult__isset {
  _FMService_chown_presult__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_chown_presult__isset;

class FMService_chown_presult {
 public:


  virtual ~FMService_chown_presult() throw() {}

  int32_t* success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_chown_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FMService_chmod_args__isset {
  _FMService_chmod_args__isset() : path(false), fa(false) {}
  bool path;
  bool fa;
} _FMService_chmod_args__isset;

class FMService_chmod_args {
 public:

  FMService_chmod_args() : path() {
  }

  virtual ~FMService_chmod_args() throw() {}

  std::string path;
  FileAccessInode fa;

  _FMService_chmod_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_fa(const FileAccessInode& val) {
    fa = val;
  }

  bool operator == (const FMService_chmod_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(fa == rhs.fa))
      return false;
    return true;
  }
  bool operator != (const FMService_chmod_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_chmod_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FMService_chmod_pargs {
 public:


  virtual ~FMService_chmod_pargs() throw() {}

  const std::string* path;
  const FileAccessInode* fa;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_chmod_result__isset {
  _FMService_chmod_result__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_chmod_result__isset;

class FMService_chmod_result {
 public:

  FMService_chmod_result() : success(0) {
  }

  virtual ~FMService_chmod_result() throw() {}

  int32_t success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_chmod_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_aee(const NotFoundFileException& val) {
    aee = val;
  }

  void __set_nfe(const NotAFileException& val) {
    nfe = val;
  }

  bool operator == (const FMService_chmod_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(aee == rhs.aee))
      return false;
    if (!(nfe == rhs.nfe))
      return false;
    return true;
  }
  bool operator != (const FMService_chmod_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_chmod_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_chmod_presult__isset {
  _FMService_chmod_presult__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_chmod_presult__isset;

class FMService_chmod_presult {
 public:


  virtual ~FMService_chmod_presult() throw() {}

  int32_t* success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_chmod_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FMService_remove_args__isset {
  _FMService_remove_args__isset() : path(false), fa(false) {}
  bool path;
  bool fa;
} _FMService_remove_args__isset;

class FMService_remove_args {
 public:

  FMService_remove_args() : path() {
  }

  virtual ~FMService_remove_args() throw() {}

  std::string path;
  FileAccessInode fa;

  _FMService_remove_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_fa(const FileAccessInode& val) {
    fa = val;
  }

  bool operator == (const FMService_remove_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(fa == rhs.fa))
      return false;
    return true;
  }
  bool operator != (const FMService_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FMService_remove_pargs {
 public:


  virtual ~FMService_remove_pargs() throw() {}

  const std::string* path;
  const FileAccessInode* fa;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_remove_result__isset {
  _FMService_remove_result__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_remove_result__isset;

class FMService_remove_result {
 public:

  FMService_remove_result() : success(0) {
  }

  virtual ~FMService_remove_result() throw() {}

  int32_t success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_remove_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_aee(const NotFoundFileException& val) {
    aee = val;
  }

  void __set_nfe(const NotAFileException& val) {
    nfe = val;
  }

  bool operator == (const FMService_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(aee == rhs.aee))
      return false;
    if (!(nfe == rhs.nfe))
      return false;
    return true;
  }
  bool operator != (const FMService_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_remove_presult__isset {
  _FMService_remove_presult__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_remove_presult__isset;

class FMService_remove_presult {
 public:


  virtual ~FMService_remove_presult() throw() {}

  int32_t* success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FMService_csize_args__isset {
  _FMService_csize_args__isset() : path(false), fc(false) {}
  bool path;
  bool fc;
} _FMService_csize_args__isset;

class FMService_csize_args {
 public:

  FMService_csize_args() : path() {
  }

  virtual ~FMService_csize_args() throw() {}

  std::string path;
  FileContentInode fc;

  _FMService_csize_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_fc(const FileContentInode& val) {
    fc = val;
  }

  bool operator == (const FMService_csize_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(fc == rhs.fc))
      return false;
    return true;
  }
  bool operator != (const FMService_csize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_csize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FMService_csize_pargs {
 public:


  virtual ~FMService_csize_pargs() throw() {}

  const std::string* path;
  const FileContentInode* fc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_csize_result__isset {
  _FMService_csize_result__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_csize_result__isset;

class FMService_csize_result {
 public:

  FMService_csize_result() : success(0) {
  }

  virtual ~FMService_csize_result() throw() {}

  int32_t success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_csize_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_aee(const NotFoundFileException& val) {
    aee = val;
  }

  void __set_nfe(const NotAFileException& val) {
    nfe = val;
  }

  bool operator == (const FMService_csize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(aee == rhs.aee))
      return false;
    if (!(nfe == rhs.nfe))
      return false;
    return true;
  }
  bool operator != (const FMService_csize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_csize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_csize_presult__isset {
  _FMService_csize_presult__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_csize_presult__isset;

class FMService_csize_presult {
 public:


  virtual ~FMService_csize_presult() throw() {}

  int32_t* success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_csize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FMService_getAttr_args__isset {
  _FMService_getAttr_args__isset() : path(false), fi(false) {}
  bool path;
  bool fi;
} _FMService_getAttr_args__isset;

class FMService_getAttr_args {
 public:

  FMService_getAttr_args() : path() {
  }

  virtual ~FMService_getAttr_args() throw() {}

  std::string path;
  FileInode fi;

  _FMService_getAttr_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_fi(const FileInode& val) {
    fi = val;
  }

  bool operator == (const FMService_getAttr_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(fi == rhs.fi))
      return false;
    return true;
  }
  bool operator != (const FMService_getAttr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_getAttr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FMService_getAttr_pargs {
 public:


  virtual ~FMService_getAttr_pargs() throw() {}

  const std::string* path;
  const FileInode* fi;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_getAttr_result__isset {
  _FMService_getAttr_result__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_getAttr_result__isset;

class FMService_getAttr_result {
 public:

  FMService_getAttr_result() {
  }

  virtual ~FMService_getAttr_result() throw() {}

  FileInode success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_getAttr_result__isset __isset;

  void __set_success(const FileInode& val) {
    success = val;
  }

  void __set_aee(const NotFoundFileException& val) {
    aee = val;
  }

  void __set_nfe(const NotAFileException& val) {
    nfe = val;
  }

  bool operator == (const FMService_getAttr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(aee == rhs.aee))
      return false;
    if (!(nfe == rhs.nfe))
      return false;
    return true;
  }
  bool operator != (const FMService_getAttr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_getAttr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_getAttr_presult__isset {
  _FMService_getAttr_presult__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_getAttr_presult__isset;

class FMService_getAttr_presult {
 public:


  virtual ~FMService_getAttr_presult() throw() {}

  FileInode* success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_getAttr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FMService_getContent_args__isset {
  _FMService_getContent_args__isset() : path(false), fi(false) {}
  bool path;
  bool fi;
} _FMService_getContent_args__isset;

class FMService_getContent_args {
 public:

  FMService_getContent_args() : path() {
  }

  virtual ~FMService_getContent_args() throw() {}

  std::string path;
  FileContentInode fi;

  _FMService_getContent_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_fi(const FileContentInode& val) {
    fi = val;
  }

  bool operator == (const FMService_getContent_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(fi == rhs.fi))
      return false;
    return true;
  }
  bool operator != (const FMService_getContent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_getContent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FMService_getContent_pargs {
 public:


  virtual ~FMService_getContent_pargs() throw() {}

  const std::string* path;
  const FileContentInode* fi;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_getContent_result__isset {
  _FMService_getContent_result__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_getContent_result__isset;

class FMService_getContent_result {
 public:

  FMService_getContent_result() {
  }

  virtual ~FMService_getContent_result() throw() {}

  FileContentInode success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_getContent_result__isset __isset;

  void __set_success(const FileContentInode& val) {
    success = val;
  }

  void __set_aee(const NotFoundFileException& val) {
    aee = val;
  }

  void __set_nfe(const NotAFileException& val) {
    nfe = val;
  }

  bool operator == (const FMService_getContent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(aee == rhs.aee))
      return false;
    if (!(nfe == rhs.nfe))
      return false;
    return true;
  }
  bool operator != (const FMService_getContent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_getContent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_getContent_presult__isset {
  _FMService_getContent_presult__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_getContent_presult__isset;

class FMService_getContent_presult {
 public:


  virtual ~FMService_getContent_presult() throw() {}

  FileContentInode* success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_getContent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FMService_getAccess_args__isset {
  _FMService_getAccess_args__isset() : path(false), fa(false) {}
  bool path;
  bool fa;
} _FMService_getAccess_args__isset;

class FMService_getAccess_args {
 public:

  FMService_getAccess_args() : path() {
  }

  virtual ~FMService_getAccess_args() throw() {}

  std::string path;
  FileAccessInode fa;

  _FMService_getAccess_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_fa(const FileAccessInode& val) {
    fa = val;
  }

  bool operator == (const FMService_getAccess_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(fa == rhs.fa))
      return false;
    return true;
  }
  bool operator != (const FMService_getAccess_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_getAccess_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FMService_getAccess_pargs {
 public:


  virtual ~FMService_getAccess_pargs() throw() {}

  const std::string* path;
  const FileAccessInode* fa;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_getAccess_result__isset {
  _FMService_getAccess_result__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_getAccess_result__isset;

class FMService_getAccess_result {
 public:

  FMService_getAccess_result() {
  }

  virtual ~FMService_getAccess_result() throw() {}

  FileAccessInode success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_getAccess_result__isset __isset;

  void __set_success(const FileAccessInode& val) {
    success = val;
  }

  void __set_aee(const NotFoundFileException& val) {
    aee = val;
  }

  void __set_nfe(const NotAFileException& val) {
    nfe = val;
  }

  bool operator == (const FMService_getAccess_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(aee == rhs.aee))
      return false;
    if (!(nfe == rhs.nfe))
      return false;
    return true;
  }
  bool operator != (const FMService_getAccess_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_getAccess_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_getAccess_presult__isset {
  _FMService_getAccess_presult__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_getAccess_presult__isset;

class FMService_getAccess_presult {
 public:


  virtual ~FMService_getAccess_presult() throw() {}

  FileAccessInode* success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_getAccess_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FMService_readdir_args__isset {
  _FMService_readdir_args__isset() : uuid(false) {}
  bool uuid;
} _FMService_readdir_args__isset;

class FMService_readdir_args {
 public:

  FMService_readdir_args() : uuid(0) {
  }

  virtual ~FMService_readdir_args() throw() {}

  int64_t uuid;

  _FMService_readdir_args__isset __isset;

  void __set_uuid(const int64_t val) {
    uuid = val;
  }

  bool operator == (const FMService_readdir_args & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    return true;
  }
  bool operator != (const FMService_readdir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_readdir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FMService_readdir_pargs {
 public:


  virtual ~FMService_readdir_pargs() throw() {}

  const int64_t* uuid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_readdir_result__isset {
  _FMService_readdir_result__isset() : success(false), nde(false) {}
  bool success;
  bool nde;
} _FMService_readdir_result__isset;

class FMService_readdir_result {
 public:

  FMService_readdir_result() : success() {
  }

  virtual ~FMService_readdir_result() throw() {}

  std::string success;
  NotADirectoryException nde;

  _FMService_readdir_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_nde(const NotADirectoryException& val) {
    nde = val;
  }

  bool operator == (const FMService_readdir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(nde == rhs.nde))
      return false;
    return true;
  }
  bool operator != (const FMService_readdir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_readdir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_readdir_presult__isset {
  _FMService_readdir_presult__isset() : success(false), nde(false) {}
  bool success;
  bool nde;
} _FMService_readdir_presult__isset;

class FMService_readdir_presult {
 public:


  virtual ~FMService_readdir_presult() throw() {}

  std::string* success;
  NotADirectoryException nde;

  _FMService_readdir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FMService_utimens_args__isset {
  _FMService_utimens_args__isset() : path(false), fc(false) {}
  bool path;
  bool fc;
} _FMService_utimens_args__isset;

class FMService_utimens_args {
 public:

  FMService_utimens_args() : path() {
  }

  virtual ~FMService_utimens_args() throw() {}

  std::string path;
  FileContentInode fc;

  _FMService_utimens_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_fc(const FileContentInode& val) {
    fc = val;
  }

  bool operator == (const FMService_utimens_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(fc == rhs.fc))
      return false;
    return true;
  }
  bool operator != (const FMService_utimens_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_utimens_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FMService_utimens_pargs {
 public:


  virtual ~FMService_utimens_pargs() throw() {}

  const std::string* path;
  const FileContentInode* fc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_utimens_result__isset {
  _FMService_utimens_result__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_utimens_result__isset;

class FMService_utimens_result {
 public:

  FMService_utimens_result() : success(0) {
  }

  virtual ~FMService_utimens_result() throw() {}

  int32_t success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_utimens_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_aee(const NotFoundFileException& val) {
    aee = val;
  }

  void __set_nfe(const NotAFileException& val) {
    nfe = val;
  }

  bool operator == (const FMService_utimens_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(aee == rhs.aee))
      return false;
    if (!(nfe == rhs.nfe))
      return false;
    return true;
  }
  bool operator != (const FMService_utimens_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_utimens_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_utimens_presult__isset {
  _FMService_utimens_presult__isset() : success(false), aee(false), nfe(false) {}
  bool success;
  bool aee;
  bool nfe;
} _FMService_utimens_presult__isset;

class FMService_utimens_presult {
 public:


  virtual ~FMService_utimens_presult() throw() {}

  int32_t* success;
  NotFoundFileException aee;
  NotAFileException nfe;

  _FMService_utimens_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FMService_rename_args__isset {
  _FMService_rename_args__isset() : old_path(false), new_path(false) {}
  bool old_path;
  bool new_path;
} _FMService_rename_args__isset;

class FMService_rename_args {
 public:

  FMService_rename_args() : old_path(), new_path() {
  }

  virtual ~FMService_rename_args() throw() {}

  std::string old_path;
  std::string new_path;

  _FMService_rename_args__isset __isset;

  void __set_old_path(const std::string& val) {
    old_path = val;
  }

  void __set_new_path(const std::string& val) {
    new_path = val;
  }

  bool operator == (const FMService_rename_args & rhs) const
  {
    if (!(old_path == rhs.old_path))
      return false;
    if (!(new_path == rhs.new_path))
      return false;
    return true;
  }
  bool operator != (const FMService_rename_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_rename_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FMService_rename_pargs {
 public:


  virtual ~FMService_rename_pargs() throw() {}

  const std::string* old_path;
  const std::string* new_path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_rename_result__isset {
  _FMService_rename_result__isset() : success(false), ppe(false), dee(false), nde(false), ipe(false) {}
  bool success;
  bool ppe;
  bool dee;
  bool nde;
  bool ipe;
} _FMService_rename_result__isset;

class FMService_rename_result {
 public:

  FMService_rename_result() : success(0) {
  }

  virtual ~FMService_rename_result() throw() {}

  int32_t success;
  ParentPathNotFoundException ppe;
  NotFoundDirectoryException dee;
  NotADirectoryException nde;
  IllegalPathException ipe;

  _FMService_rename_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_ppe(const ParentPathNotFoundException& val) {
    ppe = val;
  }

  void __set_dee(const NotFoundDirectoryException& val) {
    dee = val;
  }

  void __set_nde(const NotADirectoryException& val) {
    nde = val;
  }

  void __set_ipe(const IllegalPathException& val) {
    ipe = val;
  }

  bool operator == (const FMService_rename_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ppe == rhs.ppe))
      return false;
    if (!(dee == rhs.dee))
      return false;
    if (!(nde == rhs.nde))
      return false;
    if (!(ipe == rhs.ipe))
      return false;
    return true;
  }
  bool operator != (const FMService_rename_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FMService_rename_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FMService_rename_presult__isset {
  _FMService_rename_presult__isset() : success(false), ppe(false), dee(false), nde(false), ipe(false) {}
  bool success;
  bool ppe;
  bool dee;
  bool nde;
  bool ipe;
} _FMService_rename_presult__isset;

class FMService_rename_presult {
 public:


  virtual ~FMService_rename_presult() throw() {}

  int32_t* success;
  ParentPathNotFoundException ppe;
  NotFoundDirectoryException dee;
  NotADirectoryException nde;
  IllegalPathException ipe;

  _FMService_rename_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FMServiceClient : virtual public FMServiceIf {
 public:
  FMServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  FMServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t create(const std::string& path, const FileAccessInode& fa);
  void send_create(const std::string& path, const FileAccessInode& fa);
  int32_t recv_create();
  void open(FileInode& _return, const std::string& path, const FileAccessInode& fa);
  void send_open(const std::string& path, const FileAccessInode& fa);
  void recv_open(FileInode& _return);
  int32_t access(const std::string& path, const FileAccessInode& fa);
  void send_access(const std::string& path, const FileAccessInode& fa);
  int32_t recv_access();
  int32_t chown(const std::string& path, const FileAccessInode& fa);
  void send_chown(const std::string& path, const FileAccessInode& fa);
  int32_t recv_chown();
  int32_t chmod(const std::string& path, const FileAccessInode& fa);
  void send_chmod(const std::string& path, const FileAccessInode& fa);
  int32_t recv_chmod();
  int32_t remove(const std::string& path, const FileAccessInode& fa);
  void send_remove(const std::string& path, const FileAccessInode& fa);
  int32_t recv_remove();
  int32_t csize(const std::string& path, const FileContentInode& fc);
  void send_csize(const std::string& path, const FileContentInode& fc);
  int32_t recv_csize();
  void getAttr(FileInode& _return, const std::string& path, const FileInode& fi);
  void send_getAttr(const std::string& path, const FileInode& fi);
  void recv_getAttr(FileInode& _return);
  void getContent(FileContentInode& _return, const std::string& path, const FileContentInode& fi);
  void send_getContent(const std::string& path, const FileContentInode& fi);
  void recv_getContent(FileContentInode& _return);
  void getAccess(FileAccessInode& _return, const std::string& path, const FileAccessInode& fa);
  void send_getAccess(const std::string& path, const FileAccessInode& fa);
  void recv_getAccess(FileAccessInode& _return);
  void readdir(std::string& _return, const int64_t uuid);
  void send_readdir(const int64_t uuid);
  void recv_readdir(std::string& _return);
  int32_t utimens(const std::string& path, const FileContentInode& fc);
  void send_utimens(const std::string& path, const FileContentInode& fc);
  int32_t recv_utimens();
  int32_t rename(const std::string& old_path, const std::string& new_path);
  void send_rename(const std::string& old_path, const std::string& new_path);
  int32_t recv_rename();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FMServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FMServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FMServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_create(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_open(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_access(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_chown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_chmod(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_csize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAttr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getContent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAccess(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readdir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_utimens(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rename(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FMServiceProcessor(boost::shared_ptr<FMServiceIf> iface) :
    iface_(iface) {
    processMap_["create"] = &FMServiceProcessor::process_create;
    processMap_["open"] = &FMServiceProcessor::process_open;
    processMap_["access"] = &FMServiceProcessor::process_access;
    processMap_["chown"] = &FMServiceProcessor::process_chown;
    processMap_["chmod"] = &FMServiceProcessor::process_chmod;
    processMap_["remove"] = &FMServiceProcessor::process_remove;
    processMap_["csize"] = &FMServiceProcessor::process_csize;
    processMap_["getAttr"] = &FMServiceProcessor::process_getAttr;
    processMap_["getContent"] = &FMServiceProcessor::process_getContent;
    processMap_["getAccess"] = &FMServiceProcessor::process_getAccess;
    processMap_["readdir"] = &FMServiceProcessor::process_readdir;
    processMap_["utimens"] = &FMServiceProcessor::process_utimens;
    processMap_["rename"] = &FMServiceProcessor::process_rename;
  }

  virtual ~FMServiceProcessor() {}
};

class FMServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FMServiceProcessorFactory(const ::boost::shared_ptr< FMServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FMServiceIfFactory > handlerFactory_;
};

class FMServiceMultiface : virtual public FMServiceIf {
 public:
  FMServiceMultiface(std::vector<boost::shared_ptr<FMServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FMServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FMServiceIf> > ifaces_;
  FMServiceMultiface() {}
  void add(boost::shared_ptr<FMServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t create(const std::string& path, const FileAccessInode& fa) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create(path, fa);
    }
    return ifaces_[i]->create(path, fa);
  }

  void open(FileInode& _return, const std::string& path, const FileAccessInode& fa) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->open(_return, path, fa);
    }
    ifaces_[i]->open(_return, path, fa);
    return;
  }

  int32_t access(const std::string& path, const FileAccessInode& fa) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->access(path, fa);
    }
    return ifaces_[i]->access(path, fa);
  }

  int32_t chown(const std::string& path, const FileAccessInode& fa) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->chown(path, fa);
    }
    return ifaces_[i]->chown(path, fa);
  }

  int32_t chmod(const std::string& path, const FileAccessInode& fa) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->chmod(path, fa);
    }
    return ifaces_[i]->chmod(path, fa);
  }

  int32_t remove(const std::string& path, const FileAccessInode& fa) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(path, fa);
    }
    return ifaces_[i]->remove(path, fa);
  }

  int32_t csize(const std::string& path, const FileContentInode& fc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->csize(path, fc);
    }
    return ifaces_[i]->csize(path, fc);
  }

  void getAttr(FileInode& _return, const std::string& path, const FileInode& fi) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAttr(_return, path, fi);
    }
    ifaces_[i]->getAttr(_return, path, fi);
    return;
  }

  void getContent(FileContentInode& _return, const std::string& path, const FileContentInode& fi) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getContent(_return, path, fi);
    }
    ifaces_[i]->getContent(_return, path, fi);
    return;
  }

  void getAccess(FileAccessInode& _return, const std::string& path, const FileAccessInode& fa) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAccess(_return, path, fa);
    }
    ifaces_[i]->getAccess(_return, path, fa);
    return;
  }

  void readdir(std::string& _return, const int64_t uuid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readdir(_return, uuid);
    }
    ifaces_[i]->readdir(_return, uuid);
    return;
  }

  int32_t utimens(const std::string& path, const FileContentInode& fc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->utimens(path, fc);
    }
    return ifaces_[i]->utimens(path, fc);
  }

  int32_t rename(const std::string& old_path, const std::string& new_path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rename(old_path, new_path);
    }
    return ifaces_[i]->rename(old_path, new_path);
  }

};

} // namespace

#endif
