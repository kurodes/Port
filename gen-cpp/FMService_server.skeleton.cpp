// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "FMService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::LocofsRpc;

class FMServiceHandler : virtual public FMServiceIf {
 public:
  FMServiceHandler() {
    // Your initialization goes here
  }

  int32_t create(const std::string& path, const FileAccessInode& fa) {
    // Your implementation goes here
    printf("create\n");
  }

  void open(FileInode& _return, const std::string& path, const FileAccessInode& fa) {
    // Your implementation goes here
    printf("open\n");
  }

  int32_t access(const std::string& path, const FileAccessInode& fa) {
    // Your implementation goes here
    printf("access\n");
  }

  int32_t chown(const std::string& path, const FileAccessInode& fa) {
    // Your implementation goes here
    printf("chown\n");
  }

  int32_t chmod(const std::string& path, const FileAccessInode& fa) {
    // Your implementation goes here
    printf("chmod\n");
  }

  int32_t remove(const std::string& path, const FileAccessInode& fa) {
    // Your implementation goes here
    printf("remove\n");
  }

  int32_t csize(const std::string& path, const FileContentInode& fc) {
    // Your implementation goes here
    printf("csize\n");
  }

  void getAttr(FileInode& _return, const std::string& path, const FileInode& fi) {
    // Your implementation goes here
    printf("getAttr\n");
  }

  void getContent(FileContentInode& _return, const std::string& path, const FileContentInode& fi) {
    // Your implementation goes here
    printf("getContent\n");
  }

  void getAccess(FileAccessInode& _return, const std::string& path, const FileAccessInode& fa) {
    // Your implementation goes here
    printf("getAccess\n");
  }

  void readdir(std::string& _return, const int64_t uuid) {
    // Your implementation goes here
    printf("readdir\n");
  }

  int32_t utimens(const std::string& path, const FileContentInode& fc) {
    // Your implementation goes here
    printf("utimens\n");
  }

  int32_t rename(const std::string& old_path, const std::string& new_path) {
    // Your implementation goes here
    printf("rename\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<FMServiceHandler> handler(new FMServiceHandler());
  shared_ptr<TProcessor> processor(new FMServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

